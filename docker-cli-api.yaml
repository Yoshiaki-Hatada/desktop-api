openapi: 3.0.1
info:
  contact:
    email: support@docker.com
    url: 'https://www.docker.com/company/contact'
    name: Docker Inc.
  description: This is the Docker Desktop CLI API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  termsOfService: 'https://www.docker.com/legal/docker-terms-service'
  title: Docker Desktop CLI API
  version: 0.1.0
externalDocs:
  description: Find out more about Docker Desktop API
  url: 'https://docs.docker.com/desktop/api/'
tags:
  - name: docker desktop cli
  - name: metrics
  - name: uuid
  - name: notification
  - name: features
paths:
  /usage:
    post:
      summary: Metrics endpoint
      tags:
        - metrics
      description: Submits metrics about a given command
      operationId: postMetrics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetricsCommand'
        description: Submits a new metrics entry
        required: true
      responses:
        '200':
          content: {}
          description: Metrics successfully submitted
  /uuid:
    get:
      summary: UUID endpoint
      tags:
        - uuid
      responses:
        '200':
          description: OK
      operationId: get-uuid
      description: UUID endpoint to get Docker Desktop UUID
  /features:
    get:
      summary: Features endpoint
      tags:
        - features
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeaturesModel'
      operationId: get-features
      description: Features endpoint
  /notifications:
    post:
      summary: GUI system toast endpoint
      tags:
        - notification
      description: Shows a notification in the form of a system toast
      operationId: showToast
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationModel'
        description: Shows a notification in the form of a system toast
        required: true
      responses:
        '200':
          content: { }
          description: Notification successfully showed
components:
  schemas:
    MetricsCommand:
      type: object
      title: Metrics Command
      properties:
        command:
          type: string
        context:
          type: string
        source:
          type: string
        status:
          type: string
          enum:
            - success
            - failure
            - failure-compose-parse
            - failure-file-not-found
            - failure-cmd-syntax
            - failure-build
            - failure-pull
            - canceled
      example:
        command: compose up
        context: default
        source: cli
        status: success
    NotificationModel:
      type: object
      title: Notification Model
      properties:
        title:
          type: string
        body:
          type: string
        level:
          type: integer
          enum:
            - 0 # Info
            - 1 # Warning
            - 2 # Error
      example:
        title: Notification title
        body: Notification message
        status: 0
    FeaturesModel:
      type: object
      title: Features Model
      properties:
        prouser:
          type: object
          properties:
            enabled:
              type: boolean
              description: true when it's a Pro user
          required:
            - enabled
      example:
        prouser:
          enabled: true
